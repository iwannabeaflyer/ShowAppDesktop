<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="accesItem" xml:space="preserve">
    <value>What item do you want to acces?</value>
  </data>
  <data name="accesOutofRange" xml:space="preserve">
    <value>Index is out of range</value>
  </data>
  <data name="addComplete" xml:space="preserve">
    <value>Adding complete</value>
  </data>
  <data name="addNewItem" xml:space="preserve">
    <value>Adding a new item</value>
  </data>
  <data name="assignAlternative" xml:space="preserve">
    <value>Enter an Alternative name of the show if it has one</value>
  </data>
  <data name="assignDescription" xml:space="preserve">
    <value>Enter the description of the show</value>
  </data>
  <data name="assignEnding" xml:space="preserve">
    <value>Enter if the show has an ending</value>
  </data>
  <data name="assignEnglish" xml:space="preserve">
    <value>Enter the English name of the show</value>
  </data>
  <data name="assignEpisodes" xml:space="preserve">
    <value>Enter the amount of episodes of the show</value>
  </data>
  <data name="assignGenres" xml:space="preserve">
    <value>Enter the genres of the show</value>
  </data>
  <data name="assignNotes" xml:space="preserve">
    <value>Enter any additional notes about the show</value>
  </data>
  <data name="assignRuntime" xml:space="preserve">
    <value>Enter the runtime of a single episode</value>
  </data>
  <data name="assignScore" xml:space="preserve">
    <value>Enter the score of the show</value>
  </data>
  <data name="assignWatched" xml:space="preserve">
    <value>Enter if you have already watched it</value>
  </data>
  <data name="edit" xml:space="preserve">
    <value>Editing</value>
  </data>
  <data name="editComplete" xml:space="preserve">
    <value>Editing complete</value>
  </data>
  <data name="editField" xml:space="preserve">
    <value>What field do you want to edit?</value>
  </data>
  <data name="editOptions" xml:space="preserve">
    <value>"alternative" to edit the alternative name
"english" to edit the english name
"episodes" to edit the amount of episodes
"description" to edit the description
"genres" to edit its genres
"notes" to edit the notes
"score" to edit the score
"runtime" to edit the runtime
"watched" to edit if you have watched it
"ending" to edit if it has an ending
"exit" to stop editing</value>
    <comment>make sure the words marked by "xy" are the same as their cmdXy counterpart value.
all commands should be fully lowercase</comment>
  </data>
  <data name="find" xml:space="preserve">
    <value>Finding</value>
  </data>
  <data name="findCancel" xml:space="preserve">
    <value>Canceling the search</value>
  </data>
  <data name="findConfirmNo" xml:space="preserve">
    <value>Are you sure you want to search using: no ?</value>
  </data>
  <data name="findConfirmOther" xml:space="preserve">
    <value>Are you sure you want to search using: {0} ?</value>
    <comment>{0} is the users input</comment>
  </data>
  <data name="findConfirmYes" xml:space="preserve">
    <value>Are you sure you want to search using: yes ?</value>
  </data>
  <data name="findContinue" xml:space="preserve">
    <value>Type "y" to continue</value>
  </data>
  <data name="findEnding" xml:space="preserve">
    <value>Does it have an ending?</value>
  </data>
  <data name="findField" xml:space="preserve">
    <value>What field do you want to search in?</value>
  </data>
  <data name="findNoResult" xml:space="preserve">
    <value>There hasn't been any item found in {0} with the term {1} do you want to use a different term?</value>
  </data>
  <data name="findOptions" xml:space="preserve">
    <value>"alternative" to look for the alternative name
"english" to look for the english name
"genres" to look in the genres 
"description" to look in the description 
"watched" to look if you watched it 
"ending" to look if it has an ending 
"exit" to stop searching</value>
    <comment>make sure the words marked by "xy" are the same as their cmdXy counterpart value.
all commands should be fully lowercase</comment>
  </data>
  <data name="findOther" xml:space="preserve">
    <value>On what do you want to search?</value>
  </data>
  <data name="findWatched" xml:space="preserve">
    <value>Have you watched it?</value>
  </data>
  <data name="invalidCommand" xml:space="preserve">
    <value>{0} isn't a valid command please enter a valid command</value>
    <comment>{0} is the users input</comment>
  </data>
  <data name="load" xml:space="preserve">
    <value>Loading</value>
  </data>
  <data name="loadComplete" xml:space="preserve">
    <value>Loading complete</value>
  </data>
  <data name="loadFileName" xml:space="preserve">
    <value>What is the name of the file?</value>
  </data>
  <data name="mainOptions" xml:space="preserve">
    <value>"add" to adding a new item
"remove" to remove an excisting item
"find" to find an item
"edit" to edit an excisting item
"save" to save the excisting items
"load" to load items from a file
"settings" to change the settings
"exit" to stop the program</value>
    <comment>make sure the words marked by "xy" are the same as their cmdXy counterpart value.
all commands should be fully lowercase</comment>
  </data>
  <data name="NaN" xml:space="preserve">
    <value>{0} isn't a valid number please fill in a number</value>
    <comment>{0} is the users input</comment>
  </data>
  <data name="noName" xml:space="preserve">
    <value>Failed to serialize a show since it doesn't have a name</value>
  </data>
  <data name="programEnd" xml:space="preserve">
    <value>Ending Program</value>
  </data>
  <data name="programStart" xml:space="preserve">
    <value>Starting Program</value>
  </data>
  <data name="remove" xml:space="preserve">
    <value>Removing</value>
  </data>
  <data name="removeCancel" xml:space="preserve">
    <value>Canceling the removal</value>
  </data>
  <data name="removeComplete" xml:space="preserve">
    <value>Removing complete</value>
  </data>
  <data name="removeConfirm" xml:space="preserve">
    <value>Are you sure you want to remove:</value>
  </data>
  <data name="save" xml:space="preserve">
    <value>Saving</value>
  </data>
  <data name="saveComplete" xml:space="preserve">
    <value>Saving complete</value>
  </data>
  <data name="saveFileName" xml:space="preserve">
    <value>What should the file be named?</value>
  </data>
  <data name="showAlternative" xml:space="preserve">
    <value>Alternative name of the show : </value>
  </data>
  <data name="showDescription" xml:space="preserve">
    <value>Description : </value>
  </data>
  <data name="showEnding" xml:space="preserve">
    <value>Has an ending : </value>
  </data>
  <data name="showEnglish" xml:space="preserve">
    <value>English name of the show : </value>
  </data>
  <data name="showEpisodes" xml:space="preserve">
    <value>Number of Episodes : </value>
  </data>
  <data name="showGenres" xml:space="preserve">
    <value>Genres : </value>
  </data>
  <data name="showNotes" xml:space="preserve">
    <value>Additional notes : </value>
  </data>
  <data name="showRuntime" xml:space="preserve">
    <value>The total runtime is {0}:{1} or {2} minutes per episode</value>
    <comment>{0} for hours, (1} for minutes</comment>
  </data>
  <data name="showScore" xml:space="preserve">
    <value>Score : </value>
  </data>
  <data name="showWatched" xml:space="preserve">
    <value>Watched : </value>
  </data>
  <data name="unsavedChanges" xml:space="preserve">
    <value>The file has been changed but not saved, do you want to save it?</value>
  </data>
  <data name="yesNo" xml:space="preserve">
    <value>Yes / No</value>
  </data>
  <data name="yesNoOther" xml:space="preserve">
    <value>Yes / No / Other</value>
  </data>
  <data name="languages" xml:space="preserve">
    <value>1 English
2 Dutch</value>
  </data>
  <data name="newLanguage" xml:space="preserve">
    <value>The new language of the application is : </value>
  </data>
  <data name="setLanguage" xml:space="preserve">
    <value>What language do you want to use?</value>
  </data>
  <data name="cmdAdd" xml:space="preserve">
    <value>add</value>
  </data>
  <data name="cmdAlternative" xml:space="preserve">
    <value>alternative</value>
  </data>
  <data name="cmdDescription" xml:space="preserve">
    <value>description</value>
  </data>
  <data name="cmdEdit" xml:space="preserve">
    <value>edit</value>
  </data>
  <data name="cmdEnding" xml:space="preserve">
    <value>ending</value>
  </data>
  <data name="cmdEnglish" xml:space="preserve">
    <value>english</value>
  </data>
  <data name="cmdEpisodes" xml:space="preserve">
    <value>episodes</value>
  </data>
  <data name="cmdExit" xml:space="preserve">
    <value>exit</value>
  </data>
  <data name="cmdFind" xml:space="preserve">
    <value>find</value>
  </data>
  <data name="cmdGenres" xml:space="preserve">
    <value>genres</value>
  </data>
  <data name="cmdLoad" xml:space="preserve">
    <value>load</value>
  </data>
  <data name="cmdNotes" xml:space="preserve">
    <value>notes</value>
  </data>
  <data name="cmdRemove" xml:space="preserve">
    <value>remove</value>
  </data>
  <data name="cmdRuntime" xml:space="preserve">
    <value>runtime</value>
  </data>
  <data name="cmdSave" xml:space="preserve">
    <value>save</value>
  </data>
  <data name="cmdScore" xml:space="preserve">
    <value>score</value>
  </data>
  <data name="cmdSettings" xml:space="preserve">
    <value>settings</value>
  </data>
  <data name="cmdWatched" xml:space="preserve">
    <value>watched</value>
  </data>
  <data name="noLong" xml:space="preserve">
    <value>no</value>
    <comment>should be fully lowercase</comment>
  </data>
  <data name="noShort" xml:space="preserve">
    <value>n</value>
    <comment>should be fully lowercase</comment>
  </data>
  <data name="otherLong" xml:space="preserve">
    <value>other</value>
    <comment>should be fully lowercase</comment>
  </data>
  <data name="otherShort" xml:space="preserve">
    <value>o</value>
    <comment>should be fully lowercase</comment>
  </data>
  <data name="yesLong" xml:space="preserve">
    <value>yes</value>
    <comment>should be fully lowercase</comment>
  </data>
  <data name="yesShort" xml:space="preserve">
    <value>y</value>
    <comment>should be fully lowercase</comment>
  </data>
  <data name="setTheme" xml:space="preserve">
    <value>What theme do you want to use?</value>
  </data>
  <data name="settings" xml:space="preserve">
    <value>What setting you want to change?
"language" or "theme"</value>
  </data>
  <data name="settingsLanguage" xml:space="preserve">
    <value>language</value>
  </data>
  <data name="settingsTheme" xml:space="preserve">
    <value>theme</value>
  </data>
  <data name="themes" xml:space="preserve">
    <value>1 Light
2 Dark
3 Matrix</value>
  </data>
  <data name="browserConfirm" xml:space="preserve">
    <value>Do you want to open a webbrowser to look up more information?</value>
  </data>
  <data name="browserInput" xml:space="preserve">
    <value>Please enter on what website you want to search</value>
  </data>
  <data name="browserOpen" xml:space="preserve">
    <value>Opening a webbrowser</value>
  </data>
  <data name="browserOptions" xml:space="preserve">
    <value>"google" to open up Google
"wiki" to open Wikipedia
"imdb" to open IMDB
"mal" to open MAL
"youtube" to open Youtube
"exit" to back out</value>
    <comment>make sure the words marked by "x" are the same as their x counterpart value.
all commands should be fully lowercase</comment>
  </data>
  <data name="google" xml:space="preserve">
    <value>google</value>
  </data>
  <data name="imdb" xml:space="preserve">
    <value>imdb</value>
    <comment>Internet Movie DataBase</comment>
  </data>
  <data name="mal" xml:space="preserve">
    <value>mal</value>
    <comment>MyAnimeList</comment>
  </data>
  <data name="settingsOptions" xml:space="preserve">
    <value>"language" to change the language
"theme" to editing the theme of the application
"exit" to back out of the settings</value>
    <comment>all commands should be fully lowercase</comment>
  </data>
  <data name="wikipedia" xml:space="preserve">
    <value>wiki</value>
  </data>
  <data name="youtube" xml:space="preserve">
    <value>youtube</value>
  </data>
  <data name="directoryPath" xml:space="preserve">
    <value>Please enter the directory</value>
  </data>
  <data name="loadMode" xml:space="preserve">
    <value>Do you want to give a different directory to load from?</value>
  </data>
  <data name="noValidPath" xml:space="preserve">
    <value>{0} isn't a valid path, resulting to the default path</value>
  </data>
  <data name="saveMode" xml:space="preserve">
    <value>Do you want to give a directory to store the file on a specific location?</value>
  </data>
  <data name="animelon" xml:space="preserve">
    <value>animelon</value>
  </data>
  <data name="crunchyroll" xml:space="preserve">
    <value>crunchyroll</value>
  </data>
</root>